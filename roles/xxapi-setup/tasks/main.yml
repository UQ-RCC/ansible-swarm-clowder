---
- name: copy pitschixapi.conf.j2
  template:
    src: "pitschixapi.conf.j2"
    dest: "/pitschixapi.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"

# - name: create a network for clowder setup
#   docker_network:
#     name: clowder
#     scope: global
#     driver: "overlay"
#     attachable: "yes"
#     state: present
#     appends: "yes"
#     ipam_config:
#       - subnet: 17.7.0.0/16

- block:
  - name: data for traefik
    file:
      path: /mnt/traefik
      state: directory
      mode: '0755'
  - name: data for xapi-data
    file:
      path: /mnt/xapi-data
      state: directory
      mode: '0755'

- name: init swarm
  docker_swarm:
    state: present
    advertise_addr: "{{ hostvars[inventory_hostname]['ansible_ssh_host'] }}"
    tls: yes
    validate_certs: yes
  register: result

- name: create the rest of clowder stack
  docker_stack:
    name: "xapi"
    compose:
      - version: "3.5"
        services: 
          ################ traefik
          traefik:
            image: "{{ traefik_image }}"
            command:
              - "--api"
              - "--api.dashboard=true"
              # Entrypoints
              # Create an entrypoint "http" listening on port 80
              - "--entrypoints.http.address=:80"
              # Create an entrypoint "https" listening on port 443
              - "--entrypoints.https.address=:443"
              # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
              - "--certificatesresolvers.le.acme.email={{ traefik_acme_email }}"
              # Store the Let's Encrypt certificates in the mounted volume
              - "--certificatesresolvers.le.acme.storage=/config/acme.json"
              # Use the TLS Challenge for Let's Encrypt
              - "--certificatesresolvers.le.acme.tlschallenge=true"
              # DOCKER
              - "--providers.docker"
              - "--providers.docker.swarmmode"
              - "--providers.docker.exposedbydefault=false"
              - "--providers.docker.watch"
              - "--providers.docker.network=clowder"
              # LOG
              - "--log"
              - "--accesslog"
              - "--log.level=DEBUG"
            networks:
              - clowder
            ports:
            - target: 80
              published: 80
              mode: host
            - target: 443
              published: 443
              mode: host
              # - "80:80"
              # - "443:443"
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - /mnt/traefik:/config
            deploy:
              mode: replicated
              replicas: 1
              update_config:
                parallelism: 1
                delay: 10s
              restart_policy:
                condition: on-failure
              labels:
                - "traefik.enable=true"
                - "traefik.docker.network=clowder"
                - "traefik.http.middlewares.admin-auth.basicauth.users={{ traefik_user }}"
                - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                - "traefik.http.routers.traefik-public-http.entrypoints=http"
                - "traefik.http.routers.traefik-public-http.middlewares=https-redirect"
                - "traefik.http.routers.traefik-public-https.middlewares=traefik-ipwhitelist"
                - "traefik.http.routers.traefik-public-https.rule=Host(`traefik.{{ inventory_hostname }}.rcc.uq.edu.au`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
                - "traefik.http.routers.traefik-public-https.entrypoints=https"
                - "traefik.http.routers.traefik-public-https.service=api@internal"
                - "traefik.http.routers.traefik-public-https.tls=true"
                - "traefik.http.routers.traefik-public-https.tls.certresolver=le"
                - "traefik.http.routers.traefik-public-https.middlewares=admin-auth"
                - "traefik.http.services.traefik-public.loadbalancer.server.port=9999"
                - "traefik.http.middlewares.traefik-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"

                
          ### xapi
          # ----------------------------------------------------------------------
          # Postgres DB
          # ----------------------------------------------------------------------
          xapidb:
            image: "{{ pitschi_xapi_db_image }}"
            networks:
              - clowder
            environment:
              - POSTGRES_USER={{ xapi_user }}
              - POSTGRES_PASSWORD={{ xapi_pass }}
              - POSTGRES_DB={{ xapi_db }}
            volumes:
              - /mnt/xapi-data:/var/lib/postgresql/data
            deploy:
              mode: replicated
              replicas: 1
              restart_policy:
                condition: on-failure

          xapi:
            image: "{{ pitschi_xapi_image }}"
            networks:
              - clowder
            depends_on:
              - xapidb
            command: ["uvicorn", "pitschi.main:pitschixapi", "--host", "0.0.0.0", "--port", "80", "--root-path", "/xapi"]
            volumes:
              - /pitschixapi.conf:/etc/pitschi/conf/pitschixapi.conf
            deploy:
              mode: replicated
              replicas: 1
              restart_policy:
                condition: on-failure
              labels:
                - "traefik.enable=true"
                - "traefik.docker.network=clowder"
                - "traefik.http.routers.xapi-http.entrypoints=http"
                - "traefik.http.routers.xapi-http.middlewares=https-redirect"
                - "traefik.http.routers.xapi-https.rule=Host(`{{ inventory_hostname }}.rcc.uq.edu.au`) && PathPrefix(`/xapi`)"
                - "traefik.http.routers.xapi-https.middlewares=xapi-https-stripprefix, xapi-ipwhitelist"
                - "traefik.http.middlewares.xapi-https-stripprefix.stripprefix.prefixes=/xapi"
                - "traefik.http.routers.xapi-https.entrypoints=https"
                - "traefik.http.routers.xapi-https.tls=true"
                - "traefik.http.routers.xapi-https.tls.certresolver=le"
                - "traefik.http.services.xapi.loadbalancer.server.port=80"
                - "traefik.http.middlewares.xapi-ipwhitelist.ipwhitelist.sourcerange={{ xapi_ip_filters }}"

          static:
            image: "nginx:1.23"
            networks:
              - clowder
            deploy:
              mode: replicated
              replicas: 1
              restart_policy:
                condition: on-failure
              labels:
                - "traefik.enable=true"
                - "traefik.docker.network=clowder"
                - "traefik.http.routers.hello-http.entrypoints=http"
                - "traefik.http.routers.hello-http.middlewares=https-redirect"
                - "traefik.http.routers.hello-https.rule=Host(`{{ inventory_hostname }}.rcc.uq.edu.au`) && PathPrefix(`/hello`)"
                - "traefik.http.routers.hello-https.middlewares=hello-https-stripprefix"
                - "traefik.http.middlewares.hello-https-stripprefix.stripprefix.prefixes=/hello"
                - "traefik.http.routers.hello-https.entrypoints=https"
                - "traefik.http.routers.hello-https.tls=true"
                - "traefik.http.routers.hello-https.tls.certresolver=le"
                - "traefik.http.services.hello.loadbalancer.server.port=80"


        networks:
          clowder:
            external: true
        
