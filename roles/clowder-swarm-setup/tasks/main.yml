---
- block:
  - name: data for es
    file:
      path: /mnt/es-data
      state: directory
      mode: '0755'
  - name: log for es
    file:
      path: /mnt/es-logs
      state: directory
      mode: '0755'
  - name: data for mongo
    file:
      path: /mnt/mongo-data
      state: directory
      mode: '0755'
  - name: config for mongo
    file:
      path: /mnt/mongo-configs
      state: directory
      mode: '0755'
  - name: clowder
    file:
      path: /mnt/clowder
      state: directory
      mode: '0755'
  - name: rabbitmq
    file:
      path: /mnt/rabbitmq
      state: directory
      mode: '0755'
  - name: portainer dir
    file:
      path: /mnt/portainer
      state: directory
      mode: '0755'
  - name: xapi
    file:
      path: /mnt/xapi-data
      state: directory
      mode: '0755'

  when: inventory_hostname in groups['SwarmSlave']

- block:
  - name: traefik
    file:
      path: /mnt/traefik
      state: directory
      mode: '0755'
  - name: consul
    file:
      path: /mnt/consul
      state: directory
      mode: '0755'
  when: inventory_hostname in groups['SwarmMaster']


#### volumes for docker #############
# - name: create 
#   docker_volume:
#     name: es-data
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/es-data/
# - name: create es logs volumes
#   docker_volume:
#     name: es-logs
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/es-logs/
# - name: create mongo db volumes
#   docker_volume:
#     name: mongo-data
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/mongo-data/
# - name: create mongo config
#   docker_volume:
#     name: mongo-configs
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/mongo-configs/
# - name: create traefik volume
#   docker_volume:
#     name: traefik_volume
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/traefik
# - name: create clowder volume
#   docker_volume:
#     name: clowder_volume
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/clowder
- name: create q collections volume
  docker_volume:
    name: qcollections_volume
    driver: local
    driver_options:
      o: bind
      type: none
      device: /data  
# - name: create rabbitmq volume
#   docker_volume:
#     name: rabbitmq_volume
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/rabbitmq
# - name: create portainer volume
#   docker_volume:
#     name: portainer_volume
#     driver: local
#     driver_options:
#       o: bind
#       type: none
#       device: /mnt/portainer




####### copy configs ###########
- block:
  - name: copy custom.play.plugins
    template:
      #src: "custom.play.plugins.withoutppms.j2"
      src: "custom.play.plugins.j2"
      dest: "/custom.play.plugins"
      mode: '0755'
      force: "yes"
      backup: "yes"
  - name: copy pitschixapi_no_ingest_sync_project.conf.j2
    template:
      src: "pitschixapi_no_ingest_sync_project.conf.j2"
      dest: "/pitschixapi.conf"
      mode: '0755'
      force: "yes"
      backup: "yes"
  when: inventory_hostname==groups['SwarmSlave'][0]

- block:
  - name: copy custom play plugsin without ppms 
    template:
      src: "custom.play.plugins.withoutppms.j2"
      dest: "/custom.play.plugins"
      mode: '0755'
      force: "yes"
      backup: "yes"
  when: inventory_hostname!=groups['SwarmSlave'][0] and inventory_hostname in groups['SwarmSlave']

- name: copy pitschixapi_no_ingest_sync_booking.conf.j2
  template:
    src: "pitschixapi_no_ingest_sync_booking.conf.j2"
    dest: "/pitschixapi.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"
  when: inventory_hostname==groups['SwarmSlave'][1]

- name: copy pitschixapi_ingest_no_sync.conf.j2
  template:
    src: "pitschixapi_ingest_no_sync.conf.j2"
    dest: "/pitschixapi.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"
  when: inventory_hostname==groups['SwarmSlave'][2]

- name: copy custom.conf
  template:
    src: "custom.conf.j2"
    dest: "/custom.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"
  when: inventory_hostname in groups['SwarmSlave']

- name: copy rabbitmq.confg.j2
  template:
    src: "rabbitmq.conf.j2"
    dest: "/rabbitmq.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"
  when: inventory_hostname in groups['SwarmSlave']

- name: copy dashboard_config.json.j2
  template:
    src: "dashboard_config.json.j2"
    dest: "/dashboard_config.json"
    mode: '0755'
    force: "yes"
    backup: "yes"

- name: copy pitschi_maintenance.conf.j2
  template:
    src: "pitschi_maintenance.conf.j2"
    dest: "/pitschi_maintenance.conf.conf"
    mode: '0755'
    force: "yes"
    backup: "yes"


- block:
  - name: create a network for all clowder setup
    docker_network:
      name: clowder
      driver: "overlay"
      attachable: "yes"
      ipam_config:
        - subnet: 17.7.0.0/16

    ######################################################
    ### escluster ###
  - name: create escluster service
    docker_stack:
      name: "es"
      state: "present"
      compose:
        - version: "3.5"
          services:
            escluster:
              image: "{{ elastic_search_image }}"
              networks:
                - clowder
              volumes:
                - /mnt/es-data:/usr/share/elasticsearch/data
                - /mnt/es-logs:/usr/share/elasticsearch/logs
              deploy:
                mode: global
                endpoint_mode: dnsrr       
                resources:
                  limits:
                    memory: 2G
                placement:
                  constraints:
                    - node.role != manager
              # for somereasons, environment varibles not passed on to elsaticearch
              command: elasticsearch -Des.cluster.name=clowder -Dnetwork.host=0.0.0.0 -Des.discovery.zen.ping.multicast.enabled=false -Des.discovery.zen.ping.unicast.hosts=escluster -Des.gateway.expected_nodes=3 -Des.discovery.zen.minimum_master_nodes=2 -Des.gateway.recover_after_nodes=2 -Des.network.bind=_eth0:ipv4_ 
          networks:
            clowder:
              external: true
  ######################################################
  ### mongo ###
  - name: create mongo service
    docker_stack:
      name: "mongo"
      compose:
        - version: "3.5"
          services:
            mongo:
              image: "{{ mongo_image }}"
              networks:
                - clowder
              volumes:
                - /mnt/mongo-data:/data/db
                - /mnt/mongo-configs:/data/configdb
              deploy:
                mode: global
                endpoint_mode: dnsrr       
                resources:
                  limits:
                    memory: 1G
                placement:
                  constraints:
                    - node.role != manager
              command: mongod --replSet clowder --port 27017 --noauth
          networks:
            clowder:
              external: true

  ### copy file init_mongo.sh ##
  - name: copy init_mongo.sh
    template:
      src: "init_mongo.sh.j2"
      dest: "/init_mongo.sh"
      mode: '0755'
      force: "yes"
      backup: "yes"

  - name: sleep to wait things to calmn down 
    pause:
      seconds: 10
  ### init mongo ###
  # docker_container does not work - have to use command
  - name: init mongo
    command: docker run --name mongoinit --network=clowder --rm -v /init_mongo.sh:/init_mongo.sh mongo:3.6-xenial "/init_mongo.sh"

  - name: sleep for another 20 seconds 
    pause:
      seconds: 20

  # - name: create the rest
  - name: create the rest of clowder stack
    docker_stack:
      name: "clowder"
      compose:
        - version: "3.5"
          services:
            # consulmaster:
            #   image: "{{ consul_image }}"
            #   command: agent -server -client=0.0.0.0 -bootstrap -ui
            #   volumes:
            #     - /mnt/consul:/consul/data
            #   environment:
            #     - CONSUL_BIND_INTERFACE=eth1
            #     - 'CONSUL_LOCAL_CONFIG={"leave_on_terminate": true}'
            #   networks:
            #     - clowder
            #   deploy:
            #     replicas: 1
            #     placement:
            #       constraints:
            #         - node.hostname=={{ groups['SwarmMaster'][0] }}
            #     restart_policy:
            #       condition: on-failure
            #     labels:
            #       - "traefik.enable=true"
            #       - "traefik.docker.network=clowder"
            #       - "traefik.http.middlewares.consul-auth.basicauth.users={{ traefik_user }}"
            #       - "traefik.http.routers.consul-http.entrypoints=http"
            #       - "traefik.http.routers.consul-http.middlewares=https-redirect"
            #       - "traefik.http.routers.consul-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/consul`)"
            #       - "traefik.http.routers.consul-https.middlewares=consul-https-stripprefix, consul-ipwhitelist, consul-auth"
            #       - "traefik.http.middlewares.consul-https-stripprefix.stripprefix.prefixes=/consul"
            #       - "traefik.http.routers.consul-https.entrypoints=https"
            #       - "traefik.http.routers.consul-https.tls=true"
            #       - "traefik.http.routers.consul-https.tls.certresolver=le"
            #       - "traefik.http.services.consul.loadbalancer.server.port=8500"
            #       - "traefik.http.middlewares.consul-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"

            # consulslave:
            #   image: "{{ consul_image }}"
            #   command: agent -server -client=0.0.0.0 -retry-join="consulmaster"
            #   volumes:
            #     - /mnt/consul:/consul/data
            #   environment:
            #     - CONSUL_BIND_INTERFACE=eth1
            #     - 'CONSUL_LOCAL_CONFIG={"leave_on_terminate": true}'
            #   networks:
            #     - clowder
            #   deploy:
            #     replicas: "{{ total_consul_slave_nodes }}"
            #     placement:
            #       constraints:
            #         - node.role == manager
            #         - node.hostname!={{ groups['SwarmMaster'][0] }}
            #   depends_on:
            #     - consulmaster
             
            ################ traefik
            traefik:
              image: "{{ traefik_image }}"
              command:
                - "--api"
                - "--api.dashboard=true"
                # Entrypoints
                # Create an entrypoint "http" listening on port 80
                - "--entrypoints.http.address=:80"
                # Create an entrypoint "https" listening on port 443
                - "--entrypoints.https.address=:443"
                # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
                - "--certificatesresolvers.le.acme.email={{ traefik_acme_email }}"
                # Store the Let's Encrypt certificates in the mounted volume
                - "--certificatesresolvers.le.acme.storage=/config/acme.json"
                # Use the TLS Challenge for Let's Encrypt
                - "--certificatesresolvers.le.acme.tlschallenge=true"
                # DOCKER
                - "--providers.docker"
                - "--providers.docker.swarmmode"
                - "--providers.docker.exposedbydefault=false"
                - "--providers.docker.watch"
                - "--providers.docker.network=clowder"
                # CONSUL
                # - "--providers.consul.endpoints=consulmaster:8500"
                # LOG
                - "--log"
                - "--accesslog"
                # - "--log.level=DEBUG"
              networks:
                - clowder
              ports:
                - target: 80
                  published: 80
                  mode: host
                - target: 443
                  published: 443
                  mode: host
                  # - "80:80"
                  # - "443:443"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - /mnt/traefik:/config
              deploy:
                mode: global
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role == manager
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.middlewares.traefik-auth.basicauth.users={{ traefik_user }}"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.traefik-public-http.entrypoints=http"
                  - "traefik.http.routers.traefik-public-http.middlewares=https-redirect"
                  - "traefik.http.routers.traefik-public-https.middlewares=traefik-ipwhitelist, traefik-auth, error-pages-middleware"
                  - "traefik.http.routers.traefik-public-https.rule=Host(`{{ traefik_dns }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
                  - "traefik.http.routers.traefik-public-https.entrypoints=https"
                  - "traefik.http.routers.traefik-public-https.service=api@internal"
                  - "traefik.http.routers.traefik-public-https.tls=true"
                  - "traefik.http.routers.traefik-public-https.tls.certresolver=le"
                  - "traefik.http.services.traefik-public.loadbalancer.server.port=9999"
                  - "traefik.http.middlewares.traefik-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"
              # depends_on:
                # - consulmaster

            clowder:
              image: "{{ clowder_image }}"
              networks:
                - clowder
              # labels:
              #   - "traefik.enable=true"
              #   - "traefik.docker.network=clowder"
              #   - "traefik.http.routers.clowder-http.entrypoints=http"
              #   - "traefik.http.routers.clowder-http.middlewares=https-redirect"
              #   - "traefik.http.routers.clowder-https.rule=Host(`{{ pitschi_dns }}`)"
              #   - "traefik.http.routers.clowder-https.entrypoints=https"
              #   - "traefik.http.routers.clowder-https.tls=true"
              #   - "traefik.http.routers.clowder-https.tls.certresolver=le"
              #   - "traefik.http.services.clowder.loadbalancer.server.port=9000"
              volumes:
                - /clowder_data/:/home/clowder/data
                - qcollections_volume:/data
                - /custom.conf:/home/clowder/custom/custom.conf
                - /custom.play.plugins:/home/clowder/custom/play.plugins
              deploy:
                mode: global
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.routers.clowder-http.entrypoints=http"
                  - "traefik.http.routers.clowder-http.middlewares=https-redirect"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.clowder-https.rule=Host(`{{ pitschi_dns }}`)"
                  - "traefik.http.routers.clowder-https.entrypoints=https"
                  - "traefik.http.routers.clowder-https.tls=true"
                  - "traefik.http.routers.clowder-https.tls.certresolver=le"
                  - "traefik.http.services.clowder.loadbalancer.server.port=9000"
                  - "traefik.http.services.clowder.loadbalancer.sticky.cookie=true"
                  - "traefik.http.services.clowder.loadbalancer.sticky.cookie.name=pitschi_cookie"


            ############### rabbit mq ##################
            # message broker (optional but needed for extractors)
            rabbitmq:
              image: "{{ rabbitmq_image }}"
              networks:
                - clowder
              # environment:
              #   - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbitmq"
              #   - RABBITMQ_DEFAULT_USER={{ rabbitmq_default_user }}
              #   - RABBITMQ_DEFAULT_PASS={{ rabbitmq_default_pass }}
              volumes:
                - /mnt/rabbitmq:/var/lib/rabbitmq
                - /rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
              deploy:
                mode: replicated
                replicas: 1
                # endpoint_mode: dnsrr
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    # - node.role != manager
                    - node.hostname=={{ groups['SwarmSlave'][1] }}
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.routers.rabbit-http.entrypoints=http"
                  - "traefik.http.routers.rabbit-http.middlewares=https-redirect"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.rabbit-https.entrypoints=https"
                  - "traefik.http.routers.rabbit-https.tls=true"
                  - "traefik.http.routers.rabbit-https.tls.certresolver=le"
                  - "traefik.http.routers.rabbit-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/rabbitmq`)"
                  - "traefik.http.routers.rabbit-https.middlewares=rabbit-https-stripprefix, rabbit-ipwhitelist, rabbit-auth"
                  - "traefik.http.middlewares.rabbit-auth.basicauth.users={{ traefik_user }}"
                  - "traefik.http.middlewares.rabbit-https-stripprefix.stripprefix.prefixes=/rabbitmq"
                  - "traefik.http.middlewares.rabbit-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"
                  - "traefik.http.services.rabbit.loadbalancer.server.port=15672"

            ############# monitor #################  
            # monitor clowder extractors
            monitor:
              image: "{{ monitor_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
                - RABBITMQ_MGMT_PORT={{ rabbitmq_mgmt_port }}
                - RABBITMQ_MGMT_PATH={{ rabbitmq_mgmt_path }}
              deploy:
                mode: replicated
                replicas: 1
                # endpoint_mode: dnsrr
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.routers.monitor-http.entrypoints=http"
                  - "traefik.http.routers.monitor-http.middlewares=https-redirect"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.monitor-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/monitor`)"
                  - "traefik.http.routers.monitor-https.middlewares=monitor-https-stripprefix, monitor-ipwhitelist, monitor-auth"
                  - "traefik.http.middlewares.monitor-auth.basicauth.users={{ traefik_user }}"
                  - "traefik.http.middlewares.monitor-https-stripprefix.stripprefix.prefixes=/monitor"
                  - "traefik.http.routers.monitor-https.entrypoints=https"
                  - "traefik.http.routers.monitor-https.tls=true"
                  - "traefik.http.routers.monitor-https.tls.certresolver=le"
                  - "traefik.http.services.monitor.loadbalancer.server.port=9999"
                  - "traefik.http.middlewares.monitor-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"

            # not needed for test
            # portainer:
            #   image: "{{ portainer_image }}"
            #   command:
            #     - --admin-password={{ portainer_password }}
            #     - --host=unix:///var/run/docker.sock
            #   networks:
            #     - clowder
            #   environment:
            #     - TRAEFIK_HOST=Host:{{ pitschi_dns }};
            #     - TRAEFIK_IPFILTER="{{ traefik_ip_filters }}"
            #   volumes:
            #     - /var/run/docker.sock:/var/run/docker.sock
            #     - /mnt/portainer:/data
            #   deploy:
            #     mode: replicated
            #     replicas: 1
            #     # endpoint_mode: dnsrr
            #     restart_policy:
            #       condition: on-failure
            #     labels:
                    # - "traefik.enable=true"
                    # - "traefik.docker.network=clowder"
                    # - "traefik.http.routers.portainer-http.entrypoints=http"
                    # - "traefik.http.routers.portainer-http.middlewares=https-redirect"
                    # - "traefik.http.routers.portainer-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/portainer`)"
                    # - "traefik.http.routers.portainer-https.middlewares=portainer-https-stripprefix, portainer-ipwhitelist, portainer-auth"
                    # - "traefik.http.middlewares.portainer-auth.basicauth.users={{ traefik_user }}"
                    # - "traefik.http.middlewares.portainer-https-stripprefix.stripprefix.prefixes=/portainer"
                    # - "traefik.http.routers.portainer-https.entrypoints=https"
                    # - "traefik.http.routers.portainer-https.tls=true"
                    # - "traefik.http.routers.portainer-https.tls.certresolver=le"
                    # - "traefik.http.services.portainer.loadbalancer.server.port=9999"
                    # - "traefik.http.middlewares.portainer-ipwhitelist.ipwhitelist.sourcerange={{ traefik_ip_filters }}"


            # ----------------------------------------------------------------------
            # EXTRACTORS
            # ----------------------------------------------------------------------
            # extract checksum
            # filedigest:
            #   image: "{{ filedigest_image }}"
            #   networks:
            #     - clowder
            #   depends_on:
            #     - rabbitmq
            #     - clowder
            #   environment:
            #     - RABBITMQ_URI={{ rabbitmq_uri }}
            #   deploy:
            #     mode: replicated
            #     replicas: 1
            #     restart_policy:
            #       condition: on-failure
            #   volumes:
            #     - qcollections_volume:/data

            # extract preview image
            imagepreview:
              image: "{{ imagepreview_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                mode: global
                # mode: replicated
                # replicas: 2
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data

            # extract image metadata
            imagemetadata:
              image: "{{ imagemetadata_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                #mode: global
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data

            # extract preview image from audio spectrogram
            # audiopreview:
            #   image: "{{ audiopreview_image }}"
            #   networks:
            #     - clowder
            #   depends_on:
            #     - rabbitmq
            #     - clowder
            #   environment:
            #     - RABBITMQ_URI={{ rabbitmq_uri }}
            #   deploy:
            #     mode: replicated
            #     replicas: 1
            #     restart_policy:
            #       condition: on-failure
            #     placement:
            #       constraints:
            #         - node.role != manager
            #   volumes:
            #     - qcollections_volume:/data

            # extract pdf preview image
            pdfpreview:
              image: "{{ pdfpreview_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data

            # extract video preview image as well as smaller video
            videopreview:
              image: "{{ videopreview_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data

            hyperspy-dm3:
              image: "{{ hyperspydm3_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                # mode: global
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data


            bioformat-extractor:
              image: "{{ bioformat_extractor_image }}"
              networks:
                - clowder
              depends_on:
                - rabbitmq
                - clowder
              environment:
                - RABBITMQ_URI={{ rabbitmq_uri }}
              deploy:
                # mode: global
                mode: replicated
                replicas: 2
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.role != manager
              volumes:
                - qcollections_volume:/data
            
            wdf:
             image: "{{ wdf_image }}"
             networks:
               - clowder
             depends_on:
               - rabbitmq
               - clowder
             environment:
               - RABBITMQ_URI={{ rabbitmq_uri }}
             deploy:
               # mode: global
               mode: replicated
               replicas: 1
               restart_policy:
                 condition: on-failure
             volumes:
               - qcollections_volume:/data

            ### xapi
            # ----------------------------------------------------------------------
            # Postgres DB
            # ----------------------------------------------------------------------
            xapidb:
              image: "{{ pitschi_xapi_db_image }}"
              networks:
                - clowder
              environment:
                - POSTGRES_USER={{ xapi_user }}
                - POSTGRES_PASSWORD={{ xapi_pass }}
                - POSTGRES_DB={{ xapi_db }}
              volumes:
                - /mnt/xapi-data:/var/lib/postgresql/data
              deploy:
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.hostname=={{ groups['SwarmSlave'][0] }}

            xapi:
              image: "{{ pitschi_xapi_image }}"
              networks:
                - clowder
              depends_on:
                - xapidb
              command: ["uvicorn", "pitschi.main:pitschixapi", "--host", "0.0.0.0", "--port", "80", "--root-path", "/xapi"]
              volumes:
                - /pitschixapi.conf:/etc/pitschi/conf/pitschixapi.conf
                - qcollections_volume:/data
              deploy:
                mode: global
                # endpoint_mode: dnsrr
                restart_policy:
                  condition: on-failure
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.routers.xapi-http.entrypoints=http"
                  - "traefik.http.routers.xapi-http.middlewares=https-redirect"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.xapi-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/xapi`)"
                  - "traefik.http.routers.xapi-https.middlewares=xapi-https-stripprefix, xapi-ipwhitelist"
                  - "traefik.http.middlewares.xapi-https-stripprefix.stripprefix.prefixes=/xapi"
                  - "traefik.http.routers.xapi-https.entrypoints=https"
                  - "traefik.http.routers.xapi-https.tls=true"
                  - "traefik.http.routers.xapi-https.tls.certresolver=le"
                  - "traefik.http.services.xapi.loadbalancer.server.port=80"
                  - "traefik.http.middlewares.xapi-ipwhitelist.ipwhitelist.sourcerange={{ xapi_ip_filters }}"
                  - "traefik.http.services.xapi.loadbalancer.sticky.cookie=true"
                  - "traefik.http.services.xapi.loadbalancer.sticky.cookie.name=xapi_cookie"
                placement:
                  constraints:
                    - node.role != manager


            pitschidashboard:
              image: "{{ pitschi_dashboard_image }}"
              restart: unless-stopped
              networks:
                - clowder
              depends_on:
                - xapi
              volumes:
                - /dashboard_config.json:/usr/share/nginx/html/config.json
              deploy:
                mode: replicated
                replicas: 1
                restart_policy:
                  condition: on-failure
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=clowder"
                  - "traefik.http.routers.pdb-http.entrypoints=http"
                  - "traefik.http.routers.pdb-http.middlewares=https-redirect"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                  - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
                  - "traefik.http.routers.pdb-https.entrypoints=https"
                  - "traefik.http.routers.pdb-https.tls=true"
                  - "traefik.http.routers.pdb-https.tls.certresolver=le"
                  - "traefik.http.services.pdb.loadbalancer.server.port=80"
                  - "traefik.http.routers.pdb-https.rule=Host(`{{ pitschi_dns }}`) && PathPrefix(`/dashboard`)"
                  - "traefik.http.routers.pdb-https.middlewares=pdb-https-stripprefix, pdb-ipwhitelist, error-pages"
                  - "traefik.http.middlewares.pdb-ipwhitelist.ipwhitelist.sourcerange={{ xapi_ip_filters }}"
                  - "traefik.http.middlewares.pdb-https-stripprefix.stripprefix.prefixes=/dashboard"
                placement:
                  constraints:
                    - node.role == manager
            
            ####   maintanance error services  ###
            catch-all:
              image: nginx:stable
              volumes:
                - ./pages:/usr/share/nginx/html
                - /pitschi_maintenance.conf:/etc/nginx/conf.d/pitschi_maintenance.conf
                - /etc/localtime:/etc/localtime:ro
              labels:
                "traefik.enable: true"
                "traefik.http.services.catch-all.loadbalancer.server.port: 80"
                "traefik.http.routers.catch-all.entrypoints: http"
                "traefik.http.routers.catch-all.rule: HostRegexp(`{host:.+}`)"
                "traefik.http.routers.catch-all.priority: 1"

            error-pages:
              image: nginx:stable
              volumes:
                - ./pages:/usr/share/nginx/html
                -  /pitschi_maintenance.conf:/etc/nginx/conf.d/pitschi_maintenance.conf
                - /etc/localtime:/etc/localtime:ro
              labels:
                "traefik.enable: true"
                "traefik.http.services.error-pages.loadbalancer.server.port: 80"
                "traefik.http.routers.error-pages.entrypoints: http"
                "traefik.http.routers.error-pages.rule: HostRegexp(`error-pages.127.0.0.1.nip.io`)"
                "traefik.http.routers.error-pages.priority: 2"
                "traefik.http.middlewares.error-pages.errors.status: 400-599"
                "traefik.http.middlewares.error-pages.errors.service: error-pages"
                "traefik.http.middlewares.error-pages.errors.query: /pitschi_error.html"

          networks:
            clowder:
              external: true
          volumes:
            qcollections_volume:
              external: true

  when: inventory_hostname == groups['SwarmMaster'][0] 
